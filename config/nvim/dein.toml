[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'lewis6991/impatient.nvim'
hook_add = '''
lua << EOF
require('impatient')
EOF
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

# [[plugins]]
# repo = 'catppuccin/nvim'
# depends = ['fern.vim', 'telescope.nvim', 'nvim-treesitter']
# hook_add = '''
# let g:catppuccin_flavour = "mocha"
# lua require("catppuccin").setup()
# colorscheme catppuccin
# '''

[[plugins]]
repo = 'antoinemadec/FixCursorHold.nvim'
hook_add = 'let g:cursorhold_updatetime = 100'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  function! s:init_fern() abort
    nmap <buffer><expr>
        \ <Plug>(fern-my-open-expand-collapse)
        \ fern#smart#leaf(
        \   "\<Plug>(fern-action-open:select)",
        \   "\<Plug>(fern-action-expand)",
        \   "\<Plug>(fern-action-collapse)",
        \ )
    nmap <buffer> <CR> <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> o <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> <2-LeftMouse> <Plug>(fern-my-open-expand-collapse)
    nmap <buffer> mf <Plug>(fern-action-new-file)
    nmap <buffer> md <Plug>(fern-action-new-dir)
    nmap <buffer> D <Plug>(fern-action-remove)
    nmap <buffer> mv <Plug>(fern-action-move)
    nmap <buffer> r <Plug>(fern-action-rename)
    nmap <buffer> s <Plug>(fern-action-open:split)
    nmap <buffer> v <Plug>(fern-action-open:vsplit)
    nmap <buffer> R <Plug>(fern-action-reload)

    nmap <buffer> <nowait> d <Plug>(fern-action-hidden:toggle)
    nmap <buffer> <nowait> < <Plug>(fern-action-leave)
    nmap <buffer> <nowait> > <Plug>(fern-action-enter)

    nmap <buffer> q :<C-u>quit<CR>
  endfunction

  augroup fern-custom
    autocmd! *
    autocmd FileType fern call s:init_fern()
  augroup END

  nnoremap <silent><C-e> :Fern . -reveal=% -drawer -toggle<CR>
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
  if executable("typescript-language-server")
    " グローバルインストールされたnpmモジュールの保存場所
    let s:npm_root = trim(system("npm root -g"))
    " vim-lspのinitialization_optionsを使用して、typescript-deno-pluginのインストール場所をtypescript-language-serverへ伝えます
    let s:has_typescript_deno_plugin = isdirectory(s:npm_root . "/typescript-deno-plugin")
    let s:plugins = s:has_typescript_deno_plugin
      \ ? [{ "name": "typescript-deno-plugin", "location": s:npm_root }]
      \ : []
    augroup LspTypeScript
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
      \   "name": "typescript-language-server",
      \   "cmd": {server_info -> ["typescript-language-server", "--stdio"]},
      \   "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
      \   "whitelist": ["typescript", "typescript.tsx"],
      \   "initialization_options": { "plugins": s:plugins },
      \ })
    augroup END
  endif
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'

[[plugins]]
repo = 'akinsho/bufferline.nvim'
tag = 'v3.*'
hook_add = '''
set termguicolors
lua << EOF
require("bufferline").setup{
  options = {
    mode = "buffers",
    numbers = function(opts) return string.format('%s·%s', opts.raise(opts.id), opts.lower(opts.ordinal)) end,
    buffer_close_icon = 'x',
    modified_icon = '●',
    close_icon = '',
    left_trunc_marker = '',
    right_trunc_marker = '',
    max_name_length = 18,
    max_prefix_length = 15, -- prefix used when a buffer is de-duplicated
    truncate_names = true, -- whether or not tab names should be truncated
    tab_size = 18,
    diagnostics = "nvim_lsp",
    diagnostics_update_in_insert = false,
    always_show_bufferline = false,
    hover = { enabled = true, delay = 200, reveal = {'close'} },
  }
}
vim.keymap.set('n', '<Tab>', '<Cmd>BufferLineCycleNext<CR>', {})
vim.keymap.set('n', '<S-Tab>', '<Cmd>BufferLineCyclePrev<CR>', {})
EOF
'''

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
nmap <Space> [telescope]
nnoremap <silent> [telescope]p <cmd>lua require('telescope.builtin').find_files{}<cr>
nnoremap <silent> [telescope]hp <cmd>lua require('telescope.builtin').find_files{ hidden = true }<cr>
nnoremap <silent> [telescope]b  <cmd>lua require('telescope.builtin').buffers{ ignore_current_buffer = true, sort_lastused = true }<cr>
nnoremap <silent> [telescope]gr <cmd>lua require('telescope.builtin').live_grep{}<cr>
nnoremap <silent> [telescope]gs  <cmd>lua require('telescope.builtin').git_status{}<cr>
lua require('telescope').setup{}
'''

[[plugins]]
repo = 'wakatime/vim-wakatime'

[[plugins]]
repo = 'whonore/Coqtail'
hook_add = '''
let g:coqtail_nomap = 1
nmap <Space> [coqtail]

nnoremap <silent> [coqtail]cc <Plug>CoqStart
nnoremap <silent> [coqtail]cq <Plug>CoqStop

nnoremap <silent> [coqtail]cj <Plug>CoqNext
nnoremap <silent> [coqtail]ck <Plug>CoqUndo

nnoremap <silent> [coqtail]cn <Plug>CoqToLine

nnoremap <silent> [coqtail]cT <Plug>CoqToTop
nnoremap <silent> [coqtail]cG <Plug>CoqJumpToEnd
nnoremap <silent> [coqtail]cE <Plug>CoqJumpToError
'''
