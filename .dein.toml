[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'lewis6991/impatient.nvim'
hook_add = '''
lua << EOF
require('impatient')
EOF
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  let file_name = expand("%:p")

  if has('vim_starting') && file_name == ""
    autocmd VimEnter * call ExecuteNERDTree()
  endif

  function! ExecuteNERDTree()
    if !exists('g:nerdtatus')
      execute 'NERDTree ./'
      let g:windowWidth = winwidth(winnr())
      let g:nerdtreebuf = bufnr('')
      let g:nerdstatus = 1

    elseif g:nerdstatus == 1
      execute 'wincmd t'
      execute 'vertical resize' 0
      execute 'wincmd p'
      let g:nerdstatus = 2

    elseif g:nerdstatus == 2
      execute 'wincmd t'
      execute 'vertical resize' g:windowWidth
      let g:nerdstatus = 1

    endif
  endfunction

  noremap <c-e> :<c-u>:call ExecuteNERDTree()<cr>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
  if executable("typescript-language-server")
    " グローバルインストールされたnpmモジュールの保存場所
    let s:npm_root = trim(system("npm root -g"))
    " vim-lspのinitialization_optionsを使用して、typescript-deno-pluginのインストール場所をtypescript-language-serverへ伝えます
    let s:has_typescript_deno_plugin = isdirectory(s:npm_root . "/typescript-deno-plugin")
    let s:plugins = s:has_typescript_deno_plugin
      \ ? [{ "name": "typescript-deno-plugin", "location": s:npm_root }]
      \ : []
    augroup LspTypeScript
      autocmd!
      autocmd User lsp_setup call lsp#register_server({
      \   "name": "typescript-language-server",
      \   "cmd": {server_info -> ["typescript-language-server", "--stdio"]},
      \   "root_uri": {server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
      \   "whitelist": ["typescript", "typescript.tsx"],
      \   "initialization_options": { "plugins": s:plugins },
      \ })
    augroup END
  endif
'''
